{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Welcome to the documentation for HarryscarsDB, a database created as the final assignment for my SQL course. This database is written in T-SQL using SQL Server Management Studio (SSMS). The example data was generated by ChatGPT and adjusted by me for testing purposes. Had this project been integrated with a front end and a connected domain, certain design choices would have been different. If you have any questions or feedback, feel free to reach out to me on on LinkedIn or Twitter Thank you for taking the time to explore this project! Mathias \u00d6gren","title":"Home"},{"location":"#introduction","text":"Welcome to the documentation for HarryscarsDB, a database created as the final assignment for my SQL course. This database is written in T-SQL using SQL Server Management Studio (SSMS). The example data was generated by ChatGPT and adjusted by me for testing purposes. Had this project been integrated with a front end and a connected domain, certain design choices would have been different. If you have any questions or feedback, feel free to reach out to me on on LinkedIn or Twitter Thank you for taking the time to explore this project! Mathias \u00d6gren","title":"Introduction"},{"location":"erdiagram/","text":"ER-Diagram","title":"ER-Diagram"},{"location":"erdiagram/#er-diagram","text":"","title":"ER-Diagram"},{"location":"functions/","text":"Functions fn_HASHPASSWORD This function takes a user's password (in plain text) and their unique salt, concatenates them, and then hashes the combined string using the SHA2_512 algorithm. The function returns the resulting password hash as a VARCHAR(128) . CREATE FUNCTION fn_HASHPASSWORD ( @PASSWORD NVARCHAR(128), @SALT UNIQUEIDENTIFIER ) RETURNS VARCHAR(128) AS BEGIN DECLARE @hashedPassword VARCHAR(128) DECLARE @PwdAndSalt NVARCHAR(128) SET @PwdAndSalt = CONCAT(@PASSWORD, CAST(@SALT AS VARCHAR(36))) SET @hashedPassword = CONVERT(VARCHAR(128),HASHBYTES('SHA2_512', @PwdAndSalt),2) RETURN @hashedPassword END","title":"Functions"},{"location":"functions/#functions","text":"","title":"Functions"},{"location":"functions/#fn_hashpassword","text":"This function takes a user's password (in plain text) and their unique salt, concatenates them, and then hashes the combined string using the SHA2_512 algorithm. The function returns the resulting password hash as a VARCHAR(128) . CREATE FUNCTION fn_HASHPASSWORD ( @PASSWORD NVARCHAR(128), @SALT UNIQUEIDENTIFIER ) RETURNS VARCHAR(128) AS BEGIN DECLARE @hashedPassword VARCHAR(128) DECLARE @PwdAndSalt NVARCHAR(128) SET @PwdAndSalt = CONCAT(@PASSWORD, CAST(@SALT AS VARCHAR(36))) SET @hashedPassword = CONVERT(VARCHAR(128),HASHBYTES('SHA2_512', @PwdAndSalt),2) RETURN @hashedPassword END","title":"fn_HASHPASSWORD"},{"location":"futureimprovements/","text":"Future Improvements In-App Hashing with Argon2 The implementation of password hashing could be updated to use the Argon2 algorithm, which is a modern and secure hashing function. Argon2 is designed to resist both brute-force and GPU-based attacks, making it a more secure choice compared to traditional hashing algorithms like SHA-256 or SHA-512 . By using Argon2 , we ensure that passwords are hashed in a way that is resistant to cracking attempts, enhancing the overall security of the authentication process. Actual Verification Email Currently, the verification email process is not fully implemented. The goal is to send a real verification email to users upon account creation. This email will contain a unique token or link to confirm the user's email address. This step will improve the security of the registration process by ensuring that the email provided by the user is valid and active, preventing potential misuse of the system. Not Storing Reset Codes in Global Temp Tables To improve security and avoid potential issues with session management, password reset codes should no longer be stored in global temporary tables. This change helps ensure that reset codes are kept more secure and that they aren't exposed unnecessarily to other sessions. Login for First-Time Users with Geolocation and MFA for Unfamiliar Locations Currently, users are required to provide an IP address during login attempts. However, this restriction should be removed for first-time logins . This change allows new users, who does not have an IP address associated with their account to log in and complete their registration. Geolocation Check If the user is logging in from an IP address that is geographically close to a previously recorded location (based on IP geolocation), the system should allow the login without additional checks. Geolocation data will be used to assess whether the user's current IP address matches the region or country of previous logins. Multi-Factor Authentication (MFA) for Unfamiliar Locations If the user logs in from an IP address that is not \"close enough\" to their previous logins (e.g., if they are using a significantly different geographic location), the system will prompt for Multi-Factor Authentication (MFA) . This adds an additional layer of security, ensuring that the user is indeed the account owner, even if the login attempt comes from a new or unusual location. Multi-Factor Authentication (MFA) Multi-Factor Authentication (MFA) adds an extra layer of security to the user login process by requiring users to provide two or more verification factors. This process ensures that even if an attacker has compromised the user's password, they would still need the second factor (such as a one-time code sent via email or SMS) to access the account. By requiring multiple forms of identification, MFA significantly reduces the risk of unauthorized access. Password Complexity Enforcement To ensure that users create strong passwords and to protect user accounts from being easily compromised, enforcing password complexity rules is essential. This can include setting requirements for the length, character variety, and randomness of the password. By enforcing these rules, the system helps ensure that passwords are difficult to guess or crack, thereby improving account security. Permissions Management (Role-Based Access Control) Permissions management is a critical part of securing a system and ensuring that users only have access to the data and functionality they need. By assigning specific roles and permissions, users are restricted to only the areas and actions they are authorized to access, thus protecting sensitive data and functionality.","title":"Future improvements"},{"location":"futureimprovements/#future-improvements","text":"","title":"Future Improvements"},{"location":"futureimprovements/#in-app-hashing-with-argon2","text":"The implementation of password hashing could be updated to use the Argon2 algorithm, which is a modern and secure hashing function. Argon2 is designed to resist both brute-force and GPU-based attacks, making it a more secure choice compared to traditional hashing algorithms like SHA-256 or SHA-512 . By using Argon2 , we ensure that passwords are hashed in a way that is resistant to cracking attempts, enhancing the overall security of the authentication process.","title":"In-App Hashing with Argon2"},{"location":"futureimprovements/#actual-verification-email","text":"Currently, the verification email process is not fully implemented. The goal is to send a real verification email to users upon account creation. This email will contain a unique token or link to confirm the user's email address. This step will improve the security of the registration process by ensuring that the email provided by the user is valid and active, preventing potential misuse of the system.","title":"Actual Verification Email"},{"location":"futureimprovements/#not-storing-reset-codes-in-global-temp-tables","text":"To improve security and avoid potential issues with session management, password reset codes should no longer be stored in global temporary tables. This change helps ensure that reset codes are kept more secure and that they aren't exposed unnecessarily to other sessions.","title":"Not Storing Reset Codes in Global Temp Tables"},{"location":"futureimprovements/#login-for-first-time-users-with-geolocation-and-mfa-for-unfamiliar-locations","text":"Currently, users are required to provide an IP address during login attempts. However, this restriction should be removed for first-time logins . This change allows new users, who does not have an IP address associated with their account to log in and complete their registration.","title":"Login for First-Time Users with Geolocation and MFA for Unfamiliar Locations"},{"location":"futureimprovements/#geolocation-check","text":"If the user is logging in from an IP address that is geographically close to a previously recorded location (based on IP geolocation), the system should allow the login without additional checks. Geolocation data will be used to assess whether the user's current IP address matches the region or country of previous logins.","title":"Geolocation Check"},{"location":"futureimprovements/#multi-factor-authentication-mfa-for-unfamiliar-locations","text":"If the user logs in from an IP address that is not \"close enough\" to their previous logins (e.g., if they are using a significantly different geographic location), the system will prompt for Multi-Factor Authentication (MFA) . This adds an additional layer of security, ensuring that the user is indeed the account owner, even if the login attempt comes from a new or unusual location.","title":"Multi-Factor Authentication (MFA) for Unfamiliar Locations"},{"location":"futureimprovements/#multi-factor-authentication-mfa","text":"Multi-Factor Authentication (MFA) adds an extra layer of security to the user login process by requiring users to provide two or more verification factors. This process ensures that even if an attacker has compromised the user's password, they would still need the second factor (such as a one-time code sent via email or SMS) to access the account. By requiring multiple forms of identification, MFA significantly reduces the risk of unauthorized access.","title":"Multi-Factor Authentication (MFA)"},{"location":"futureimprovements/#password-complexity-enforcement","text":"To ensure that users create strong passwords and to protect user accounts from being easily compromised, enforcing password complexity rules is essential. This can include setting requirements for the length, character variety, and randomness of the password. By enforcing these rules, the system helps ensure that passwords are difficult to guess or crack, thereby improving account security.","title":"Password Complexity Enforcement"},{"location":"futureimprovements/#permissions-management-role-based-access-control","text":"Permissions management is a critical part of securing a system and ensuring that users only have access to the data and functionality they need. By assigning specific roles and permissions, users are restricted to only the areas and actions they are authorized to access, thus protecting sensitive data and functionality.","title":"Permissions Management (Role-Based Access Control)"},{"location":"indexes/","text":"Indexes The following indexes have been created for the tables Users , SysLog , Orders and OrderLines to optimize query performance: Users Table IX_FirstNameLastName : CREATE INDEX IX_LastNameFirstName ON Users (LastName, FirstName) This index improves the performance of queries filtering or sorting by the LastName or LastName + FirstName column. IX_PostalCodeCity Index : CREATE INDEX IX_PostalCodeCity ON Users (PostalCode, City) This index improves the performance of queries filtering or sorting by the PostalCode or City column. SysLog Table IX_UserIDSysLog : CREATE INDEX IX_UserIDSysLog ON SysLog(UserID) This index improves the performance of queries filtering or sorting by the UserID column in the SysLog table. IX_DateTimeSysLog : CREATE INDEX IX_DateTimeSysLog ON SysLog(DateTime) This index improves the performance of queries filtering or sorting by the DateTime column in the SysLog table. Orders Table IX_OrderDateOrders : CREATE INDEX IX_OrderDateOrders ON Orders(OrderDate) This index improves the performance of queries filtering or sorting by the OrderDate column in the Orders table. OrderLines Table IXOrderIDOrderLines : CREATE INDEX IXOrderIDOrderLines ON OrderLines(OrderID) This index improves the performance of queries filtering or sorting by the OrderID column in the OrderLines table. IXProductIDOrderLines : CREATE INDEX IXProductIDOrderLines ON OrderLines(ProductID) This index improves the performance of queries filtering or sorting by the ProductID column in the OrderLines table.","title":"Indexes"},{"location":"indexes/#indexes","text":"The following indexes have been created for the tables Users , SysLog , Orders and OrderLines to optimize query performance:","title":"Indexes"},{"location":"indexes/#users-table","text":"IX_FirstNameLastName : CREATE INDEX IX_LastNameFirstName ON Users (LastName, FirstName) This index improves the performance of queries filtering or sorting by the LastName or LastName + FirstName column. IX_PostalCodeCity Index : CREATE INDEX IX_PostalCodeCity ON Users (PostalCode, City) This index improves the performance of queries filtering or sorting by the PostalCode or City column.","title":"Users Table"},{"location":"indexes/#syslog-table","text":"IX_UserIDSysLog : CREATE INDEX IX_UserIDSysLog ON SysLog(UserID) This index improves the performance of queries filtering or sorting by the UserID column in the SysLog table. IX_DateTimeSysLog : CREATE INDEX IX_DateTimeSysLog ON SysLog(DateTime) This index improves the performance of queries filtering or sorting by the DateTime column in the SysLog table.","title":"SysLog Table"},{"location":"indexes/#orders-table","text":"IX_OrderDateOrders : CREATE INDEX IX_OrderDateOrders ON Orders(OrderDate) This index improves the performance of queries filtering or sorting by the OrderDate column in the Orders table.","title":"Orders Table"},{"location":"indexes/#orderlines-table","text":"IXOrderIDOrderLines : CREATE INDEX IXOrderIDOrderLines ON OrderLines(OrderID) This index improves the performance of queries filtering or sorting by the OrderID column in the OrderLines table. IXProductIDOrderLines : CREATE INDEX IXProductIDOrderLines ON OrderLines(ProductID) This index improves the performance of queries filtering or sorting by the ProductID column in the OrderLines table.","title":"OrderLines Table"},{"location":"storedprocedures/","text":"Stored Procedures AddNewUser @AddNewUser Email PwdHash FirstName LastName StreetName StreetNumber PostalCode City Country UserType A , C or blank for C IsActive This stored procedure adds a new user to the system. It hashes the user's plaintext password using the fn_HASHPASSWORD function with the SHA2_512 algorithm and the user's salt. Additionally, the procedure sends a verification email to the user to confirm their account. When using this procedure without an INSERT statement, make sure the strings are provided in the correct order within the 'text' parameter. DeleteUser @DeleteUser UserID Deletes user with UserID LastNonAuthLogon @LastNonAuthLogon Shows the latest logon that was not authenticated. DisableUser @DisableUser UserID Changes the users IsActive to 0 ForgotPassword @ForgotPassword UserID or Email Takes UserID or Email and creates a reset code in a global temporary table and emails the user the reset code setforgottenpassword @setforgottenpassword Email Password Token Enter the Email , new password and the reset token , the new password is automatically hashed. trylogin @trylogin Email Password IPAddress The trylogin procedure verifies the user's email , password , and IP address against the database records. It also checks whether the user's IsActive status is set to 1. If an incorrect password is entered three times within a 15-minute period or the IP address does not match the one stored in the database, the user's IsActive status is set to 0 for 15 minutes, starting from the first failed login attempt. If additional failed login attempts occur during the lockout period, the 15-minute countdown is reset. Once the lockout period expires, the user's IsActive status is restored to 1 if the correct login is entered.","title":"Stored  Procedures"},{"location":"storedprocedures/#stored-procedures","text":"","title":"Stored Procedures"},{"location":"storedprocedures/#addnewuser","text":"@AddNewUser Email PwdHash FirstName LastName StreetName StreetNumber PostalCode City Country UserType A , C or blank for C IsActive This stored procedure adds a new user to the system. It hashes the user's plaintext password using the fn_HASHPASSWORD function with the SHA2_512 algorithm and the user's salt. Additionally, the procedure sends a verification email to the user to confirm their account. When using this procedure without an INSERT statement, make sure the strings are provided in the correct order within the 'text' parameter.","title":"AddNewUser"},{"location":"storedprocedures/#deleteuser","text":"@DeleteUser UserID Deletes user with UserID","title":"DeleteUser"},{"location":"storedprocedures/#lastnonauthlogon","text":"@LastNonAuthLogon Shows the latest logon that was not authenticated.","title":"LastNonAuthLogon"},{"location":"storedprocedures/#disableuser","text":"@DisableUser UserID Changes the users IsActive to 0","title":"DisableUser"},{"location":"storedprocedures/#forgotpassword","text":"@ForgotPassword UserID or Email Takes UserID or Email and creates a reset code in a global temporary table and emails the user the reset code","title":"ForgotPassword"},{"location":"storedprocedures/#setforgottenpassword","text":"@setforgottenpassword Email Password Token Enter the Email , new password and the reset token , the new password is automatically hashed.","title":"setforgottenpassword"},{"location":"storedprocedures/#trylogin","text":"@trylogin Email Password IPAddress The trylogin procedure verifies the user's email , password , and IP address against the database records. It also checks whether the user's IsActive status is set to 1. If an incorrect password is entered three times within a 15-minute period or the IP address does not match the one stored in the database, the user's IsActive status is set to 0 for 15 minutes, starting from the first failed login attempt. If additional failed login attempts occur during the lockout period, the 15-minute countdown is reset. Once the lockout period expires, the user's IsActive status is restored to 1 if the correct login is entered.","title":"trylogin"},{"location":"tables/","text":"Database Tables This page is formatted as: Column name Column attribute Additional information Users UserID INT , PRIMARY KEY , IDENTITY(1,1) ID given to the user when signing up Email NVARCHAR(255) , UNIQUE , NOT NULL PwdHash NVARCHAR(128) , NOT NULL Users password hash, using SHA2_512 FirstName NVARCHAR(255) , NOT NULL NVARCHAR to accommodate international use. LastName NVARCHAR(255) , NOT NULL StreetName NVARCHAR(255) , NOT NULL Has a character limit of 255 to accommodate corner cases. StreetNumber SMALLINT , NOT NULL Stored separately for normalization of the database and for easier filtering. PostalCode VARCHAR(30) , NOT NULL VARCHAR for flexibility and better international use. City NVARCHAR(255) , NOT NULL Country NVARCHAR(60) , NOT NULL UserType CHAR(1) , NOT NULL CHAR(1) represents the role with either A or C for performance and efficiency IsActive BIT , DEFAULT 1 Shows if the user is active to log in SysLog SysLogID INT , PRIMARY KEY ID for the login attempt UserID INT , FOREIGN KEY User ID of the login attempt FOREIGN KEY (UserID) REFERENCES Users(UserID) IPAddress NVARCHAR(128) Email NVARCHAR(255) , NOT NULL Shows the email address trying to login. DateTime DATETIME , NOT NULL Fetches the date and time when the login attempt was made. IsAuthenticated BIT , NOT NULL Indicates authentication success: 1 for success, 0 for failure. Orders OrderID INT , PRIMARY KEY TotalAmount INT Total amount for the products in the order. DeliveryOption INT , FOREIGN KEY OrderDate DATETIME , NOT NULL Fullfillment BIT , NOT NULL Set to 1 if the order is filled. Paymentmethod INT , FOREGIN KEY OrderLines OrderLineID INT , PRIMARY KEY OrderID INT , FOREIGN KEY , NOT NULL ProductID INT , NOT NULL ProductName NVARCHAR(255) , NOT NULL Quantity INT , NOT NULL UnitPrice DECIMAL(10, 2) , NOT NULL ShippedDate DATE WarehouseID INT , FOREIGN KEY Notes NVARCHAR(MAX) Custom notes put on the order. Products ProductID INT , PRIMARY KEY ProductName NVARCHAR(255) , NOT NULL SupplierID INT , FOREIGN KEY , NOT NULL Color INT , FOREIGN KEY ProductWeight INT UnitPrice DECIMAL (10, 2) , NOT NULL TaxAmt TINYINT IsActive BIT , NOT NULL CreatedDate DATETIME , NOT NULL LastEdited DATETIME , NOT NULL Suppliers SupplierID INT , PRIMARY KEY OrgName NVARCHAR(255) , NOT NULL Country NVARCHAR(255) Warehouse WarehouseID INT , PRIMARY KEY WarehouseName NVARCHAR(50) , NOT NULL StreetName NVARCHAR(255) , NOT NULL StreetNumber INT , NOT NULL Postalcode VARCHAR(30) , NOT NULL VARCHAR for flexibility and better international use. City NVARCHAR(255) Country NVARCHAR(255) Phone INT , NOT NULL Email NVARCHAR(100) PaymentMethods PaymentID INT , PRIMARY KEY PaymentType VARCHAR(25) DeliveryOptions DeliveryID INT , PRIMARY KEY DeliveryPrice SMALLINT DeliveryType VARCHAR(100) Colors ColorID INT , PRIMARY KEY ColorName VARCHAR(15)","title":"Tables"},{"location":"tables/#database-tables","text":"This page is formatted as: Column name Column attribute Additional information","title":"Database Tables"},{"location":"tables/#users","text":"UserID INT , PRIMARY KEY , IDENTITY(1,1) ID given to the user when signing up Email NVARCHAR(255) , UNIQUE , NOT NULL PwdHash NVARCHAR(128) , NOT NULL Users password hash, using SHA2_512 FirstName NVARCHAR(255) , NOT NULL NVARCHAR to accommodate international use. LastName NVARCHAR(255) , NOT NULL StreetName NVARCHAR(255) , NOT NULL Has a character limit of 255 to accommodate corner cases. StreetNumber SMALLINT , NOT NULL Stored separately for normalization of the database and for easier filtering. PostalCode VARCHAR(30) , NOT NULL VARCHAR for flexibility and better international use. City NVARCHAR(255) , NOT NULL Country NVARCHAR(60) , NOT NULL UserType CHAR(1) , NOT NULL CHAR(1) represents the role with either A or C for performance and efficiency IsActive BIT , DEFAULT 1 Shows if the user is active to log in","title":"Users"},{"location":"tables/#syslog","text":"SysLogID INT , PRIMARY KEY ID for the login attempt UserID INT , FOREIGN KEY User ID of the login attempt FOREIGN KEY (UserID) REFERENCES Users(UserID) IPAddress NVARCHAR(128) Email NVARCHAR(255) , NOT NULL Shows the email address trying to login. DateTime DATETIME , NOT NULL Fetches the date and time when the login attempt was made. IsAuthenticated BIT , NOT NULL Indicates authentication success: 1 for success, 0 for failure.","title":"SysLog"},{"location":"tables/#orders","text":"OrderID INT , PRIMARY KEY TotalAmount INT Total amount for the products in the order. DeliveryOption INT , FOREIGN KEY OrderDate DATETIME , NOT NULL Fullfillment BIT , NOT NULL Set to 1 if the order is filled. Paymentmethod INT , FOREGIN KEY","title":"Orders"},{"location":"tables/#orderlines","text":"OrderLineID INT , PRIMARY KEY OrderID INT , FOREIGN KEY , NOT NULL ProductID INT , NOT NULL ProductName NVARCHAR(255) , NOT NULL Quantity INT , NOT NULL UnitPrice DECIMAL(10, 2) , NOT NULL ShippedDate DATE WarehouseID INT , FOREIGN KEY Notes NVARCHAR(MAX) Custom notes put on the order.","title":"OrderLines"},{"location":"tables/#products","text":"ProductID INT , PRIMARY KEY ProductName NVARCHAR(255) , NOT NULL SupplierID INT , FOREIGN KEY , NOT NULL Color INT , FOREIGN KEY ProductWeight INT UnitPrice DECIMAL (10, 2) , NOT NULL TaxAmt TINYINT IsActive BIT , NOT NULL CreatedDate DATETIME , NOT NULL LastEdited DATETIME , NOT NULL","title":"Products"},{"location":"tables/#suppliers","text":"SupplierID INT , PRIMARY KEY OrgName NVARCHAR(255) , NOT NULL Country NVARCHAR(255)","title":"Suppliers"},{"location":"tables/#warehouse","text":"WarehouseID INT , PRIMARY KEY WarehouseName NVARCHAR(50) , NOT NULL StreetName NVARCHAR(255) , NOT NULL StreetNumber INT , NOT NULL Postalcode VARCHAR(30) , NOT NULL VARCHAR for flexibility and better international use. City NVARCHAR(255) Country NVARCHAR(255) Phone INT , NOT NULL Email NVARCHAR(100)","title":"Warehouse"},{"location":"tables/#paymentmethods","text":"PaymentID INT , PRIMARY KEY PaymentType VARCHAR(25)","title":"PaymentMethods"},{"location":"tables/#deliveryoptions","text":"DeliveryID INT , PRIMARY KEY DeliveryPrice SMALLINT DeliveryType VARCHAR(100)","title":"DeliveryOptions"},{"location":"tables/#colors","text":"ColorID INT , PRIMARY KEY ColorName VARCHAR(15)","title":"Colors"},{"location":"temptables/","text":"Temporary Tables ##activecheck email NVARCHAR(255) Email address of the user attempting to log in. failedattempt TINYINT Number of failed login attempts by the user. date DATETIME , DEFAULT GETDATE() Date and time of the last failed login attempt. ##resetpass resetcode NVARCHAR(50) The unique reset code for password recovery. Validfrom DATETIME The start date and time from which the reset code is valid. Validto DATETIME The expiration date and time of the reset code","title":"Temp tables"},{"location":"temptables/#temporary-tables","text":"","title":"Temporary Tables"},{"location":"temptables/#activecheck","text":"email NVARCHAR(255) Email address of the user attempting to log in. failedattempt TINYINT Number of failed login attempts by the user. date DATETIME , DEFAULT GETDATE() Date and time of the last failed login attempt.","title":"##activecheck"},{"location":"temptables/#resetpass","text":"resetcode NVARCHAR(50) The unique reset code for password recovery. Validfrom DATETIME The start date and time from which the reset code is valid. Validto DATETIME The expiration date and time of the reset code","title":"##resetpass"},{"location":"views/","text":"Views UserLogin UserLogin The UserLogin view displays each user's last successful and unsuccessful login attempt. AmountofLogins AmountofLogins The AmountOfLogins view provides an overview of each user's login activity, showing both successful and unsuccessful login attempts. It also calculates and displays the user's login success rate.","title":"Views"},{"location":"views/#views","text":"","title":"Views"},{"location":"views/#userlogin","text":"UserLogin The UserLogin view displays each user's last successful and unsuccessful login attempt.","title":"UserLogin"},{"location":"views/#amountoflogins","text":"AmountofLogins The AmountOfLogins view provides an overview of each user's login activity, showing both successful and unsuccessful login attempts. It also calculates and displays the user's login success rate.","title":"AmountofLogins"}]}